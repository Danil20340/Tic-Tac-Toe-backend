generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Player {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  fullName     String
  age          Int
  gender       String
  status       PlayerStatus       @default(ACTIVE)
  availability AvailabilityStatus @default(AVAILABLE)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  login        String             @unique
  password     String
  isAdmin      Boolean            @default(false)

  // Отношения
  gamesAsPlayer1 Game[]        @relation("Player1Games")
  gamesAsPlayer2 Game[]        @relation("Player2Games")
  gamesWinner    Game[]        @relation("GameWinner")
  chatMessages   ChatMessage[] @relation("PlayerMessages")
  ratings        Rating[]
}

enum PlayerStatus {
  ACTIVE
  BLOCKED
}

enum AvailabilityStatus {
  AVAILABLE
  IN_GAME
}

// Индекс для игр игрока
model Game {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  player1      Player   @relation("Player1Games", fields: [player1Id], references: [id])
  player1Id    String   @db.ObjectId
  player2      Player   @relation("Player2Games", fields: [player2Id], references: [id])
  player2Id    String   @db.ObjectId
  winner       Player?  @relation("GameWinner", fields: [winnerId], references: [id])
  winnerId     String?  @db.ObjectId
  
  //Время последнего хода
  lastMoveTime DateTime @default(now())

  // Символы игроков
  player1Symbol Symbol @default(X) // Значение по умолчанию: крестик (X)
  player2Symbol Symbol @default(O) // Значение по умолчанию: нолик (O)

  // Статус игры
  status GameStatus @default(ONGOING) // По умолчанию статус "в процессе"

  // Игровое поле
  board Json @default("[null,null,null,null,null,null,null,null,null]") // Пустое поле 3x3

  // Очерёдность хода
  nowMove Symbol @default(X) // По умолчанию первый ход за игроком с крестиком (X)

  // Чат-сообщения
  chatMessages ChatMessage[]

  // Временные отметки
  createTime   DateTime      @default(now())
  endTime      DateTime?

  // Индекс
  @@unique([player1Id, player2Id, status]) // Уникальная пара игроков и статус
}

enum GameStatus {
  ONGOING
  FINISHED
  DRAW
}

enum Symbol {
  X
  O
}

model ChatMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    String   @db.ObjectId
  sender    Player   @relation("PlayerMessages", fields: [senderId], references: [id])
  senderId  String   @db.ObjectId
  message   String
  timestamp DateTime @default(now())

  // Индекс для чатов игры
  @@index([gameId, timestamp])
}

model Rating {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  player     Player @relation(fields: [playerId], references: [id])
  playerId   String @db.ObjectId
  wins       Int    @default(0)
  losses     Int    @default(0)
  draw       Int    @default(0)
}
