generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Player {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  fullName     String
  age          Int
  gender       String
  status       PlayerStatus       @default(ACTIVE)
  availability AvailabilityStatus @default(AVAILABLE)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  login        String             @unique
  password     String
  isAdmin      Boolean            @default(false)
  
  // Отношения
  gamesAsPlayer1      Game[]        @relation("Player1Games")
  gamesAsPlayer2      Game[]        @relation("Player2Games")
  gamesWinner         Game[]        @relation("GameWinner")
  chatMessages        ChatMessage[] @relation("PlayerMessages")
  ratings             Rating[]
  invitationAsPlayer1 Invitation[]  @relation("FromInvitations")
  invitationAsPlayer2 Invitation[]  @relation("ToInvitations")
}

enum PlayerStatus {
  ACTIVE
  BLOCKED
}

enum AvailabilityStatus {
  AVAILABLE
  IN_GAME
}

// Индекс для игр игрока
model Game {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  player1       Player   @relation("Player1Games", fields: [player1Id], references: [id])
  player1Id     String   @db.ObjectId
  player2       Player   @relation("Player2Games", fields: [player2Id], references: [id])
  player2Id     String   @db.ObjectId
  winner        Player?  @relation("GameWinner", fields: [winnerId], references: [id])
  winnerId      String?  @db.ObjectId
  lastMoveTime  DateTime @default(now())
  // Символы игроков (X или O)
  player1Symbol Symbol
  player2Symbol Symbol

  // Статус игры
  status GameStatus

  // Игровое поле (хранится как JSON)
  board        Json
  nowMove      Symbol
  // Чат-сообщения
  chatMessages ChatMessage[]
  createTime   DateTime      @default(now())
  endTime      DateTime?

  @@index([player1Id, player2Id, status])
}

enum GameStatus {
  ONGOING
  FINISHED
  DRAW
}

enum Symbol {
  X
  O
}

model ChatMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    String   @db.ObjectId
  sender    Player   @relation("PlayerMessages", fields: [senderId], references: [id])
  senderId  String   @db.ObjectId
  message   String
  timestamp DateTime @default(now())

  // Индекс для чатов игры
  @@index([gameId, timestamp])
}

model Rating {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  player     Player @relation(fields: [playerId], references: [id])
  playerId   String @db.ObjectId
  totalGames Int    @default(0)
  wins       Int    @default(0)
  losses     Int    @default(0)
  draw     Int    @default(0)
}

model Invitation {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  fromPlayer   Player       @relation("FromInvitations", fields: [fromPlayerId], references: [id])
  fromPlayerId String       @db.ObjectId
  toPlayer     Player       @relation("ToInvitations", fields: [toPlayerId], references: [id])
  toPlayerId   String       @db.ObjectId
  status       InviteStatus @default(PENDING)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}
